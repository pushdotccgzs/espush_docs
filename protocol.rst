===============
终端协议
===============


---------------
前置
---------------

本服务器的设计参考了现有的移动应用APP推送服务器，预期目标用户为开发者。类似于移动APP推送平台，移动应用开发者需接入其APP到平台，通过平台控制台或平台提供的API推送广告、营销等内容到终端设备上。本平台通过与设备保持长连接，允许开发者直接在云端通过指令推送的形式控制设备。

接入本平台过程中，有以下概念需要明确：
- APPID，亦称设备类别ID，针对每一类
- APPKEY，亦称之为设备类别密钥，由于APPID为数字型，可迭代，为防止恶意伪造APP接入平台，平台对每个APPID生成一个KEY值，key值为UUID的字符串表达形式，使用python的uuid库自动生成。
- DEVID，设备ID，此为单设备唯一标识码，但需留意的是，本id需要手动在固件中初始化，若未手动初始化，则为无意义字符串。初始化此值可使用固件中的create_uuid函数，此函数将生成针对固件的唯一标识码，每次调用生成的值都将会有不同，故需一次调用，保存。
- CHIPID，设备芯片ID，此为乐鑫对ESP8266出厂内置的设备ID，平台亦有使用，且此ID不会随着固件擦除而更改。但是否唯一有待考证。

---------------
约定
---------------

- 通讯使用TCP，长连接，心跳周期290秒。为何选择290秒，因为经过大量的调查后发现，网络上大部分的路由器，其TCP保活时间多设置在300秒，故此处选择290秒，即不会太频繁以至于对网络产生影响，也不至于设备掉线。连接超时时限300秒（服务器代码在pushserver的ServerProtocol类变量，客户端心跳周期代码配置在HEARTBEAT_INTERVAL宏定义处）。约定客户端为模块端，服务端为平台端，与设备连接的服务端称之为推送服务器或推送网关，也称之为网关服务器。


留意此图的结构，无论是用户的手机APP还是第三方服务器，均严禁直接与网关服务器交互，网关服务器主要维持与设备端的连接，一切的第三方应用或第三方服务器，均需要途径Web控制台或web控制端开放的OpenAPI来与网关进行交互。

网关服务器主执行程序为 pushserver.py，控制台程序为django工程。

- 所有传输数据使用大端字节序，亦即网络字节序，每一个数据包此处称为一帧。不同的业务帧长度不一，由于TCP的流特性，每次可能接收不止一个帧，或一个帧可能会分多次按顺序抵达，每次到达一部分数据，故此处需要做好粘包处理。

- 服务器与设备的响应有可能是不同步的，亦即设备发起任何请求后，服务器可能在若干时间后才会回应，此处意味着不应对服务器的返回结果与返回速度存在任何架设，同理服务端亦如此。所以针对每一个请求，都应置入一个消息ID，一段时间内，请求与返回的数据帧中，消息ID值应唯一，且双方应以此判断。

- 消息ID的生成规则，此处消息ID只是在一段时间内不得重复，多由设备端首先产生（设备启动后发送第一条设备注册请求时产生），网关收到设备注册后同步其消息ID msgid，此后按每请求数+1的方式递增即可。

- 数据包的示例为16进制表示法，如心跳包示例：0000000a000000050002，使用此文本ASCII码表示出来有20字节，但实际上发送到网络中的只有10字节，需按大端字节序编码为 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x05, 0x00, 0x02，再行发送。

---------------
帧序
---------------

- 通用帧序，使用TCP协议为变长字节序，头4字节为帧总长度，接下来的4字节为帧的消息标识码，标识一段时间内的唯一通讯。接下来两字节帧类型，余下所有内容为帧的实际内容。最短的数据帧只有10字节，如心跳包。通用帧序如下图所示：
4字节帧头	4字节消息ID	2字节帧类型	实际内容
下文「协议篇」中，所有的协议文本将省略通用帧序（前10个字节）部分。

- 除却设备注册、心跳协议外，其余大多数的协议均是通过模块API的通用指令推送接口转换而来，完全就是通用帧序。


---------------
设备端协议
---------------





---------------
网关协议
---------------



---------------
组网方式
---------------




---------------
其他
---------------


