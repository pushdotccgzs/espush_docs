=============
服务端接口
=============

espush使用的服务端接口与其他推送平台如[信鸽](http://xg.qq.com/)等类似，简述如下

--------------------
协议整体描述
--------------------

请求URL结构为：**http://接口域名/openapi/接口命令/?接口参数**

+----------+--------------------------+------------------------------+
| 字段名   | 用途                     | 说明                         |
+==========+==========================+==============================+
| 接口域名 | 域名，当前取值espush.cn  | 使用https://协议             |
+----------+--------------------------+------------------------------+
| openapi  | 固定取值                 | 无                           |
+----------+--------------------------+------------------------------+
| 接口命令 | 接口命令地址             | 根据不同接口取值不同URL      |
+----------+--------------------------+------------------------------+
| 接口参数 | 使用HTTP GET方式传递参数 | 包括通用参数、接口指定参数等 |
+----------+--------------------------+------------------------------+


--------------------
通用参数
--------------------

各接口URL都需要在URL中传递通用参数，参数列表简单摘要如下：

+-----------+-----------------------------------+--------+--------------------+
| 参数名    | 类型                              | 必填项 | 说明               |
+===========+===================================+========+====================+
| appid     | Integer                           | 是     | 填入指定的APPID    |
+-----------+-----------------------------------+--------+--------------------+
| timestamp | 10位数字型unix时间戳              | 是     | 如1434447718       |
+-----------+-----------------------------------+--------+--------------------+
| sign      | 签名参数，32位md5后的字符串，小写 | 是     | 生成方式参考下文。 |
+-----------+-----------------------------------+--------+--------------------+

说明： **espush.cn的服务端API并不认证用户名与密码，只针对APPID与APPKEY，所以保护你的APPKEY，切勿泄露** 


--------------------
通用返回结果
--------------------

- 接口使用非常简单的HTTP JSON API形式，成功的接口依据内容的不同返回内容也有不同，但都有共同的字段 msg，用于表明此次请求的返回说明，成功的请求一般就只有OK字样。如 **{"msg": "OK"}** 
- 使用HTTP返回码，如 5XX代表服务端的错误，特别的，当与设备连接的网关服务器出错时，多返回502或504，并在msg中告知具体原因。4XX代表客户端的错误，通常401为sign取值错误，400是参数缺失，404是对应资源找不到。
- 成功的请求，HTTP返回码为200


--------------------
签名认证方式
--------------------

内容签名sign的计算方法如下：

- 提取请求的方法本身的小写字母表示，如 **get**, **post** 等，记作字符串A
- 提取请求的其他参数（GET与POST参数均需要，COOKIES参数不计入）但不包括sign，并按Key-Value的形式并转换为小写字母表示（未做urlencode），再按Key的降序排列（排序时，Value未参与，只对Key的小写字母表示做字母表的降序排列），组成如下形式：**key3=v3&key2=v4&key1=v1**，此处记作字符串B
- 提取APPKEY，记字符串C
- Sign的值为 S = lower(MD5(A+B+C))

如POST请求，APPID为1234，APPKEY为25b28f0ffb9711e4a96d446d579b49a1，无其他额外的请求参数，则只有通用参数appid、timestamp与sign，则字符串S应为: **gettimestamp=1433814203&appid=123425b28f0ffb9711e4a96d446d579b49a1** ,对其进行MD5运算，取运算后的小写字母表示，即得到最终sign值: **9f0b613de12d5bb0451c556900a39559**


--------------------
接口详细定义
--------------------

^^^^^^^^^^^^^^^^^^^^^
apps/
^^^^^^^^^^^^^^^^^^^^^

+----------+------------------------------------------------------------------------------------------------------------------+
| 接口地址 | apps/                                                                                                            |
+==========+==================================================================================================================+
| 请求方法 | GET                                                                                                              |
+----------+------------------------------------------------------------------------------------------------------------------+
| 请求参数 | 无其他参数，使用公共参数                                                                                         |
+----------+------------------------------------------------------------------------------------------------------------------+
| 返回示例 | {"name": "XXX（设备分类名）"}                                                                                    |
+----------+------------------------------------------------------------------------------------------------------------------+
| 功能     | 返回指定设备分类名称                                                                                             |
+----------+------------------------------------------------------------------------------------------------------------------+
| 说明     | 用于扫描二维码后， 显示设备分类名称同时用于校验二维码是否有效 （是否已经被用户删除了该分类）。有效的方能被返回。 |
+----------+------------------------------------------------------------------------------------------------------------------+



^^^^^^^^^^^^^^^^^^^^^
devices/list/
^^^^^^^^^^^^^^^^^^^^^

+----------+------------------------------------------------------------------------------------------------------------------+
| 接口地址 | devices/list/                                                                                                    |
+==========+==================================================================================================================+
| 请求方法 | GET                                                                                                              |
+----------+------------------------------------------------------------------------------------------------------------------+
| 请求参数 | 无其他参数，使用公共参数                                                                                         |
+----------+------------------------------------------------------------------------------------------------------------------+
| 返回示例 | [{}]   返回数组里包裹对象，对象为单个设备的信息，包括其所属的设备分类APPID、最后检测到的存活时间等。             |
+----------+------------------------------------------------------------------------------------------------------------------+
| 功能     | 返回指定设分备类名称                                                                                             |
+----------+------------------------------------------------------------------------------------------------------------------+
| 说明     | 返回某分类下所有在线的终端，等同于web控制台的在线设备功能                                                        |
+----------+------------------------------------------------------------------------------------------------------------------+



^^^^^^^^^^^^^^^^^^^^^
dev/push/message/
^^^^^^^^^^^^^^^^^^^^^



- 功能：向指定的单个设备推送指令或消息，当前使用模块的芯片chipid，后期可能增加使用者自定义的ID。此接口是面向单个设备的消息、指令推送，故返回结果需要等待设备的返回，若设备返回较慢，则此接口同理。客户端需要自行处理超时，一般10秒后若未收到客户端的返回则可认为客户端已下线。
- 方法：POST
- 参数：:devid，需要在URL中填入目标devid亦即chipid，同时POST包体为需要推送的消息，支持推送原始二进制串 如 \x00\x01 等，同时POST包体信息不计入sign的计算。
- 返回：{"msg": "success"}




^^^^^^^^^^^^^^^^^^^^^
app/push/message/
^^^^^^^^^^^^^^^^^^^^^


功能：面向指定的设备分类群推消息，目前的接口不会缓存消息，只有该分类下的终端/模块在线时方能推送。且发出此接口后，接口会立即返回，并不会等待所有的模块接收到指令后方返回，故生效可能存在延迟。
- 参数：:appid ，需要在URL中填入目标APPID，同时POST包体为需要推送的消息，支持推送原始二进制串 如 \x00\x01 等，同时POST包体信息不计入sign的计算。
- 返回：[{'id':id, 'dev':dev, 'body': msgbody, 'msgtype': msgtype}]



^^^^^^^^^^^^^^^^^^^^^
up_messages/
^^^^^^^^^^^^^^^^^^^^^

**/openapi/**
功能：查看模块/终端推送到云平台的数据
- 返回：{"msg": "success"}



^^^^^^^^^^^^^^^^^^^^^
push_messages/
^^^^^^^^^^^^^^^^^^^^^

查看从云平台推送到设备、模块的指令。

- 返回：[{'id':id, 'dev':dev, 'body': msgbody, 'msgtype': msgtype}]



^^^^^^^^^^^^^^^^^^^^^
sync/
^^^^^^^^^^^^^^^^^^^^^

数据同步，用以同步从模块上传到云端的数据



^^^^^^^^^^^^^^^^^^^^^
rt_status/:key/
^^^^^^^^^^^^^^^^^^^^^

实时状态回调接口，用以获取模块当下状态，KEY的取值为模块定义的回调函数，此API目前仅限NodeMCU固件使用


^^^^^^^^^^^^^^^^^^^^^
gpio_status/:chipid/
^^^^^^^^^^^^^^^^^^^^^

获取模块各GPIO口的状态


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
set_gpio_edge/:chipid/:pin/:edge/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

设置指定模块的GPIO口电平态


^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
manual_refresh/:chipid/
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

手动刷新指定模块的存活状态
